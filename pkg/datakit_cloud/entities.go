// Code generated by go generate; DO NOT EDIT.
// This file was generated from GraphQL schema

package datakit_cloud

type EnumSchemaNamespace string

const EnumSchemaNamespacesync EnumSchemaNamespace = "sync"
const EnumSchemaNamespaceview EnumSchemaNamespace = "view"
const EnumSchemaNamespaceworkspace EnumSchemaNamespace = "workspace"

type EnumSyncStatus string

const EnumSyncStatusERROR EnumSyncStatus = "ERROR"
const EnumSyncStatusPENDING EnumSyncStatus = "PENDING"
const EnumSyncStatusRUNNING EnumSyncStatus = "RUNNING"
const EnumSyncStatusSCHEDULED EnumSyncStatus = "SCHEDULED"
const EnumSyncStatusSUCCESS EnumSyncStatus = "SUCCESS"

type AirbyteCatalog struct {
	Streams []AirbyteStream `json:"streams"`
}

type AirbyteStream struct {
	Default_cursor_field       []*string  `json:"default_cursor_field"`
	Json_schema                JSONSchema `json:"json_schema"`
	Name                       string     `json:"name"`
	Namespace                  *string    `json:"namespace"`
	Source_defined_cursor      *bool      `json:"source_defined_cursor"`
	Source_defined_primary_key []*string  `json:"source_defined_primary_key"`
	Supported_sync_modes       []*string  `json:"supported_sync_modes"`
}

type Assistant struct {
	Chats       []*Chat             `json:"chats"`
	CreatedAt   DateTime            `json:"createdAt"`
	Datasets    []*AssistantDataset `json:"datasets"`
	Description string              `json:"description"`
	Id          string              `json:"id"`
	Name        string              `json:"name"`
	UpdatedAt   DateTime            `json:"updatedAt"`
	Workspace   Workspace           `json:"workspace"`
	WorkspaceId string              `json:"workspaceId"`
}

type AssistantDataset struct {
	Assistant      Assistant                `json:"assistant"`
	AssistantId    string                   `json:"assistantId"`
	Columns        []AssistantDatasetColumn `json:"columns"`
	Id             string                   `json:"id"`
	IdColumn       Column                   `json:"idColumn"`
	IdColumnId     string                   `json:"idColumnId"`
	Name           string                   `json:"name"`
	ResultFunction *string                  `json:"resultFunction"`
	Table          Table                    `json:"table"`
	TableId        string                   `json:"tableId"`
}

type AssistantDatasetColumn struct {
	Column     Column           `json:"column"`
	ColumnId   string           `json:"columnId"`
	Dataset    AssistantDataset `json:"dataset"`
	DatasetId  string           `json:"datasetId"`
	Filterable bool             `json:"filterable"`
	Searchable bool             `json:"searchable"`
}

type Chat struct {
	ClientId    *string        `json:"clientId"`
	CreatedAt   DateTime       `json:"createdAt"`
	Id          string         `json:"id"`
	Messages    []*ChatMessage `json:"messages"`
	Parent      *ChatParent    `json:"parent"`
	ParentId    *string        `json:"parentId"`
	ParentType  *string        `json:"parentType"`
	UpdatedAt   DateTime       `json:"updatedAt"`
	User        *User          `json:"user"`
	UserId      *string        `json:"userId"`
	Workspace   Workspace      `json:"workspace"`
	WorkspaceId string         `json:"workspaceId"`
}

type ChatMessage struct {
	Chat        Chat           `json:"chat"`
	ChatId      string         `json:"chatId"`
	Children    []*ChatMessage `json:"children"`
	Content     string         `json:"content"`
	ContentId   *string        `json:"contentId"`
	ContentType *string        `json:"contentType"`
	CreatedAt   DateTime       `json:"createdAt"`
	Id          string         `json:"id"`
	Name        *string        `json:"name"`
	Parent      *ChatMessage   `json:"parent"`
	ParentId    *string        `json:"parentId"`
	Role        string         `json:"role"`
	TokenCount  int64          `json:"tokenCount"`
	UpdatedAt   DateTime       `json:"updatedAt"`
	User        *User          `json:"user"`
	UserId      *string        `json:"userId"`
}

type ChatParent struct {
	TypeName string `json:"__typeName"`
	Assistant
	TextQuery
}

type Column struct {
	CreatedAt  DateTime `json:"createdAt"`
	Id         string   `json:"id"`
	IsNullable bool     `json:"isNullable"`
	IsPrimary  bool     `json:"isPrimary"`
	Name       string   `json:"name"`
	OrdinalPos int64    `json:"ordinalPos"`
	Table      Table    `json:"table"`
	TableId    string   `json:"tableId"`
	Type       string   `json:"type"`
	UpdatedAt  DateTime `json:"updatedAt"`
}

type Destination struct {
	CheckSuccess bool            `json:"checkSuccess"`
	Config       *JSON           `json:"config"`
	CreatedAt    *DateTime       `json:"createdAt"`
	Id           string          `json:"id"`
	Type         DestinationType `json:"type"`
	TypeId       string          `json:"typeId"`
	UpdatedAt    *DateTime       `json:"updatedAt"`
	Workspace    Workspace       `json:"workspace"`
	WorkspaceId  string          `json:"workspaceId"`
}

type DestinationType struct {
	Config       JSON           `json:"config"`
	Description  *string        `json:"description"`
	Destinations []*Destination `json:"destinations"`
	HasOauth     bool           `json:"hasOauth"`
	Id           string         `json:"id"`
	IsEnabled    bool           `json:"isEnabled"`
	Key          *string        `json:"key"`
	Logo         *string        `json:"logo"`
	Name         string         `json:"name"`
	Object       *string        `json:"object"`
	Provider     string         `json:"provider"`
	UiSchema     *JSON          `json:"uiSchema"`
}

type JSONSchema struct {
	Properties JSON   `json:"properties"`
	Type       string `json:"type"`
}

type Schema struct {
	Db          string              `json:"db"`
	Description string              `json:"description"`
	Id          string              `json:"id"`
	Name        string              `json:"name"`
	Namespace   EnumSchemaNamespace `json:"namespace"`
	NamespaceId string              `json:"namespaceId"`
	Tables      []*Table            `json:"tables"`
	Title       string              `json:"title"`
	Workspace   Workspace           `json:"workspace"`
	WorkspaceId string              `json:"workspaceId"`
}

type Source struct {
	Assets       []SourceAsset   `json:"assets"`
	Catalog      *AirbyteCatalog `json:"catalog"`
	CheckSuccess bool            `json:"checkSuccess"`
	Config       *JSON           `json:"config"`
	CreatedAt    *DateTime       `json:"createdAt"`
	DisplayName  *string         `json:"displayName"`
	Id           string          `json:"id"`
	Type         SourceType      `json:"type"`
	TypeId       string          `json:"typeId"`
	UpdatedAt    *DateTime       `json:"updatedAt"`
	Workspace    Workspace       `json:"workspace"`
	WorkspaceId  string          `json:"workspaceId"`
}

type SourceAsset struct {
	Data JSON   `json:"data"`
	Name string `json:"name"`
}

type SourceType struct {
	AuthProvider *string   `json:"authProvider"`
	Config       JSON      `json:"config"`
	Description  *string   `json:"description"`
	HasOauth     bool      `json:"hasOauth"`
	Id           string    `json:"id"`
	IsEnabled    bool      `json:"isEnabled"`
	Key          *string   `json:"key"`
	Logo         *string   `json:"logo"`
	Name         string    `json:"name"`
	Object       *string   `json:"object"`
	Provider     string    `json:"provider"`
	Sources      []*Source `json:"sources"`
	UiSchema     *JSON     `json:"uiSchema"`
}

type SqlQuery struct {
	Children       []SqlQuery       `json:"children"`
	Columns        []SqlQueryColumn `json:"columns"`
	CreatedAt      DateTime         `json:"createdAt"`
	Downvotes      int64            `json:"downvotes"`
	Fields         []SqlQueryField  `json:"fields"`
	Id             string           `json:"id"`
	Occurences     int64            `json:"occurences"`
	Sql            *string          `json:"sql"`
	Text           *string          `json:"text"`
	UpdatedAt      DateTime         `json:"updatedAt"`
	Upvotes        int64            `json:"upvotes"`
	View           *Table           `json:"view"`
	ViewId         *string          `json:"viewId"`
	Visualizations []Visualization  `json:"visualizations"`
}

type SqlQueryColumn struct {
	ColumnId   string `json:"columnId"`
	ColumnName string `json:"columnName"`
	Id         string `json:"id"`
	SchemaName string `json:"schemaName"`
	SqlQueryId string `json:"sqlQueryId"`
	TableName  string `json:"tableName"`
}

type SqlQueryField struct {
	Id         string `json:"id"`
	Mode       string `json:"mode"`
	Name       string `json:"name"`
	OrdinalPos int64  `json:"ordinalPos"`
	SqlQueryId string `json:"sqlQueryId"`
	Type       string `json:"type"`
}

type Sync struct {
	CreatedAt     *DateTime      `json:"createdAt"`
	Destination   Destination    `json:"destination"`
	DestinationId string         `json:"destinationId"`
	Error         *string        `json:"error"`
	Id            string         `json:"id"`
	LastSyncStats *SyncStats     `json:"lastSyncStats"`
	SchedFreq     int64          `json:"schedFreq"`
	SchedHour     int64          `json:"schedHour"`
	SchedTz       string         `json:"schedTz"`
	SchedUtc      string         `json:"schedUtc"`
	Schema        Schema         `json:"schema"`
	SchemaId      string         `json:"schemaId"`
	Source        Source         `json:"source"`
	SourceId      string         `json:"sourceId"`
	StartedAt     *DateTime      `json:"startedAt"`
	State         *JSON          `json:"state"`
	Status        EnumSyncStatus `json:"status"`
	SyncedAt      *DateTime      `json:"syncedAt"`
	UpdatedAt     *DateTime      `json:"updatedAt"`
	Workspace     Workspace      `json:"workspace"`
	WorkspaceId   string         `json:"workspaceId"`
}

type SyncStats struct {
	Duration     float64  `json:"duration"`
	EndAt        DateTime `json:"endAt"`
	Id           string   `json:"id"`
	MaxCPU       float64  `json:"maxCPU"`
	MaxMem       float64  `json:"maxMem"`
	StartAt      DateTime `json:"startAt"`
	Sync         Sync     `json:"sync"`
	SyncId       string   `json:"syncId"`
	TotalBytes   BigInt   `json:"totalBytes"`
	TotalRecords BigInt   `json:"totalRecords"`
}

type Table struct {
	Columns   []*Column `json:"columns"`
	CreatedAt DateTime  `json:"createdAt"`
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	Schema    Schema    `json:"schema"`
	SchemaId  string    `json:"schemaId"`
	SqlQuery  *SqlQuery `json:"sqlQuery"`
	UpdatedAt DateTime  `json:"updatedAt"`
}

type TextQuery struct {
	Chats      []*Chat           `json:"chats"`
	Columns    []TextQueryColumn `json:"columns"`
	CreatedAt  *DateTime         `json:"createdAt"`
	Id         string            `json:"id"`
	Occurences int64             `json:"occurences"`
	SqlQueries []SqlQuery        `json:"sqlQueries"`
	Text       string            `json:"text"`
	UpdatedAt  *DateTime         `json:"updatedAt"`
}

type TextQueryColumn struct {
	ColumnId     string  `json:"columnId"`
	ColumnName   string  `json:"columnName"`
	Idx          *int64  `json:"idx"`
	SchemaPrefix *string `json:"schemaPrefix"`
	TableName    string  `json:"tableName"`
	TextQueryId  string  `json:"textQueryId"`
	Word         *string `json:"word"`
}

type User struct {
	AcceptTerms bool      `json:"acceptTerms"`
	Company     *string   `json:"company"`
	Country     *string   `json:"country"`
	CreatedAt   DateTime  `json:"createdAt"`
	CustomerId  *string   `json:"customerId"`
	Email       string    `json:"email"`
	Id          string    `json:"id"`
	Name        string    `json:"name"`
	SignedInAt  *DateTime `json:"signedInAt"`
	UpdatedAt   *DateTime `json:"updatedAt"`
}

type Visualization struct {
	Config      JSON       `json:"config"`
	CreatedAt   DateTime   `json:"createdAt"`
	Id          string     `json:"id"`
	SqlQuery    SqlQuery   `json:"sqlQuery"`
	SqlQueryId  string     `json:"sqlQueryId"`
	TextQuery   *TextQuery `json:"textQuery"`
	TextQueryId *string    `json:"textQueryId"`
	Title       string     `json:"title"`
	Type        string     `json:"type"`
	UpdatedAt   DateTime   `json:"updatedAt"`
	Workspace   Workspace  `json:"workspace"`
	WorkspaceId string     `json:"workspaceId"`
}

type Workspace struct {
	Assistants []Assistant     `json:"assistants"`
	Chats      []Chat          `json:"chats"`
	CreatedAt  *DateTime       `json:"createdAt"`
	Id         string          `json:"id"`
	Name       string          `json:"name"`
	Schemata   []Schema        `json:"schemata"`
	Syncs      []Sync          `json:"syncs"`
	UpdatedAt  *DateTime       `json:"updatedAt"`
	Users      []WorkspaceUser `json:"users"`
}

type WorkspaceUser struct {
	Role string `json:"role"`
	User User   `json:"user"`
}
